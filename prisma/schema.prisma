generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums
enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum AccountType {
  CURRENT
  SAVING
}

model User {
  id          String   @id @default(uuid())
  clerkUserId String   @unique
  email       String   @unique
  name        String
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  budgets      Budget[]
  accounts     Account[]
  transactions Transaction[]

  @@map("users")
}

model Budget {
  id            String    @id @default(uuid())
  amount        Decimal
  lastAlertSent DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Foreign Key
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("budgets")
}

model Account {
  id        String   @id @default(uuid())
  name      String
  type      AccountType
  balance   Decimal  @default(0) // Initial balance set during user creation
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Key
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  transactions Transaction[]

  @@index([userId])
  @@map("accounts")
}

model Transaction {
  id                String   @id @default(uuid())
  type              String
  amount            Decimal
  description       String?
  date              DateTime
  category          String
  receiptUrl        String?
  isRecurring       Boolean  @default(false)
  recurringInterval RecurringInterval?
  nextRecurringDate DateTime?
  lastProcessed     DateTime?
  status            TransactionStatus @default(COMPLETED)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Foreign Keys
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}
